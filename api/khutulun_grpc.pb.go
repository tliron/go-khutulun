// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: khutulun.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClient interface {
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
	ListHosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Host_ListHostsClient, error)
	AddHost(ctx context.Context, in *AddHost, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Host_ListNamespacesClient, error)
	ListPackages(ctx context.Context, in *ListPackages, opts ...grpc.CallOption) (Host_ListPackagesClient, error)
	ListPackageFiles(ctx context.Context, in *PackageIdentifier, opts ...grpc.CallOption) (Host_ListPackageFilesClient, error)
	GetPackageFiles(ctx context.Context, in *GetPackageFiles, opts ...grpc.CallOption) (Host_GetPackageFilesClient, error)
	SetPackageFiles(ctx context.Context, opts ...grpc.CallOption) (Host_SetPackageFilesClient, error)
	RemovePackage(ctx context.Context, in *PackageIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeployService(ctx context.Context, in *DeployService, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListResources(ctx context.Context, in *ListResources, opts ...grpc.CallOption) (Host_ListResourcesClient, error)
	Interact(ctx context.Context, opts ...grpc.CallOption) (Host_InteractClient, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/khutulun.Host/getVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ListHosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Host_ListHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[0], "/khutulun.Host/listHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostListHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ListHostsClient interface {
	Recv() (*HostIdentifier, error)
	grpc.ClientStream
}

type hostListHostsClient struct {
	grpc.ClientStream
}

func (x *hostListHostsClient) Recv() (*HostIdentifier, error) {
	m := new(HostIdentifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) AddHost(ctx context.Context, in *AddHost, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Host/addHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ListNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Host_ListNamespacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[1], "/khutulun.Host/listNamespaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostListNamespacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ListNamespacesClient interface {
	Recv() (*Namespace, error)
	grpc.ClientStream
}

type hostListNamespacesClient struct {
	grpc.ClientStream
}

func (x *hostListNamespacesClient) Recv() (*Namespace, error) {
	m := new(Namespace)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) ListPackages(ctx context.Context, in *ListPackages, opts ...grpc.CallOption) (Host_ListPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[2], "/khutulun.Host/listPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostListPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ListPackagesClient interface {
	Recv() (*PackageIdentifier, error)
	grpc.ClientStream
}

type hostListPackagesClient struct {
	grpc.ClientStream
}

func (x *hostListPackagesClient) Recv() (*PackageIdentifier, error) {
	m := new(PackageIdentifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) ListPackageFiles(ctx context.Context, in *PackageIdentifier, opts ...grpc.CallOption) (Host_ListPackageFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[3], "/khutulun.Host/listPackageFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostListPackageFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ListPackageFilesClient interface {
	Recv() (*PackageFile, error)
	grpc.ClientStream
}

type hostListPackageFilesClient struct {
	grpc.ClientStream
}

func (x *hostListPackageFilesClient) Recv() (*PackageFile, error) {
	m := new(PackageFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) GetPackageFiles(ctx context.Context, in *GetPackageFiles, opts ...grpc.CallOption) (Host_GetPackageFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[4], "/khutulun.Host/getPackageFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostGetPackageFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_GetPackageFilesClient interface {
	Recv() (*PackageContent, error)
	grpc.ClientStream
}

type hostGetPackageFilesClient struct {
	grpc.ClientStream
}

func (x *hostGetPackageFilesClient) Recv() (*PackageContent, error) {
	m := new(PackageContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) SetPackageFiles(ctx context.Context, opts ...grpc.CallOption) (Host_SetPackageFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[5], "/khutulun.Host/setPackageFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostSetPackageFilesClient{stream}
	return x, nil
}

type Host_SetPackageFilesClient interface {
	Send(*PackageContent) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type hostSetPackageFilesClient struct {
	grpc.ClientStream
}

func (x *hostSetPackageFilesClient) Send(m *PackageContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostSetPackageFilesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) RemovePackage(ctx context.Context, in *PackageIdentifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Host/removePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) DeployService(ctx context.Context, in *DeployService, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Host/deployService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ListResources(ctx context.Context, in *ListResources, opts ...grpc.CallOption) (Host_ListResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[6], "/khutulun.Host/listResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostListResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ListResourcesClient interface {
	Recv() (*ResourceIdentifier, error)
	grpc.ClientStream
}

type hostListResourcesClient struct {
	grpc.ClientStream
}

func (x *hostListResourcesClient) Recv() (*ResourceIdentifier, error) {
	m := new(ResourceIdentifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) Interact(ctx context.Context, opts ...grpc.CallOption) (Host_InteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Host_ServiceDesc.Streams[7], "/khutulun.Host/interact", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostInteractClient{stream}
	return x, nil
}

type Host_InteractClient interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ClientStream
}

type hostInteractClient struct {
	grpc.ClientStream
}

func (x *hostInteractClient) Send(m *Interaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostInteractClient) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HostServer is the server API for Host service.
// All implementations must embed UnimplementedHostServer
// for forward compatibility
type HostServer interface {
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
	ListHosts(*emptypb.Empty, Host_ListHostsServer) error
	AddHost(context.Context, *AddHost) (*emptypb.Empty, error)
	ListNamespaces(*emptypb.Empty, Host_ListNamespacesServer) error
	ListPackages(*ListPackages, Host_ListPackagesServer) error
	ListPackageFiles(*PackageIdentifier, Host_ListPackageFilesServer) error
	GetPackageFiles(*GetPackageFiles, Host_GetPackageFilesServer) error
	SetPackageFiles(Host_SetPackageFilesServer) error
	RemovePackage(context.Context, *PackageIdentifier) (*emptypb.Empty, error)
	DeployService(context.Context, *DeployService) (*emptypb.Empty, error)
	ListResources(*ListResources, Host_ListResourcesServer) error
	Interact(Host_InteractServer) error
	mustEmbedUnimplementedHostServer()
}

// UnimplementedHostServer must be embedded to have forward compatible implementations.
type UnimplementedHostServer struct {
}

func (UnimplementedHostServer) GetVersion(context.Context, *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedHostServer) ListHosts(*emptypb.Empty, Host_ListHostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (UnimplementedHostServer) AddHost(context.Context, *AddHost) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHost not implemented")
}
func (UnimplementedHostServer) ListNamespaces(*emptypb.Empty, Host_ListNamespacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedHostServer) ListPackages(*ListPackages, Host_ListPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedHostServer) ListPackageFiles(*PackageIdentifier, Host_ListPackageFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPackageFiles not implemented")
}
func (UnimplementedHostServer) GetPackageFiles(*GetPackageFiles, Host_GetPackageFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackageFiles not implemented")
}
func (UnimplementedHostServer) SetPackageFiles(Host_SetPackageFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method SetPackageFiles not implemented")
}
func (UnimplementedHostServer) RemovePackage(context.Context, *PackageIdentifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackage not implemented")
}
func (UnimplementedHostServer) DeployService(context.Context, *DeployService) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployService not implemented")
}
func (UnimplementedHostServer) ListResources(*ListResources, Host_ListResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedHostServer) Interact(Host_InteractServer) error {
	return status.Errorf(codes.Unimplemented, "method Interact not implemented")
}
func (UnimplementedHostServer) mustEmbedUnimplementedHostServer() {}

// UnsafeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServer will
// result in compilation errors.
type UnsafeHostServer interface {
	mustEmbedUnimplementedHostServer()
}

func RegisterHostServer(s grpc.ServiceRegistrar, srv HostServer) {
	s.RegisterService(&Host_ServiceDesc, srv)
}

func _Host_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Host/getVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ListHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ListHosts(m, &hostListHostsServer{stream})
}

type Host_ListHostsServer interface {
	Send(*HostIdentifier) error
	grpc.ServerStream
}

type hostListHostsServer struct {
	grpc.ServerStream
}

func (x *hostListHostsServer) Send(m *HostIdentifier) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_AddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).AddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Host/addHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).AddHost(ctx, req.(*AddHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ListNamespaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ListNamespaces(m, &hostListNamespacesServer{stream})
}

type Host_ListNamespacesServer interface {
	Send(*Namespace) error
	grpc.ServerStream
}

type hostListNamespacesServer struct {
	grpc.ServerStream
}

func (x *hostListNamespacesServer) Send(m *Namespace) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_ListPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPackages)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ListPackages(m, &hostListPackagesServer{stream})
}

type Host_ListPackagesServer interface {
	Send(*PackageIdentifier) error
	grpc.ServerStream
}

type hostListPackagesServer struct {
	grpc.ServerStream
}

func (x *hostListPackagesServer) Send(m *PackageIdentifier) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_ListPackageFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PackageIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ListPackageFiles(m, &hostListPackageFilesServer{stream})
}

type Host_ListPackageFilesServer interface {
	Send(*PackageFile) error
	grpc.ServerStream
}

type hostListPackageFilesServer struct {
	grpc.ServerStream
}

func (x *hostListPackageFilesServer) Send(m *PackageFile) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_GetPackageFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackageFiles)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).GetPackageFiles(m, &hostGetPackageFilesServer{stream})
}

type Host_GetPackageFilesServer interface {
	Send(*PackageContent) error
	grpc.ServerStream
}

type hostGetPackageFilesServer struct {
	grpc.ServerStream
}

func (x *hostGetPackageFilesServer) Send(m *PackageContent) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_SetPackageFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostServer).SetPackageFiles(&hostSetPackageFilesServer{stream})
}

type Host_SetPackageFilesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PackageContent, error)
	grpc.ServerStream
}

type hostSetPackageFilesServer struct {
	grpc.ServerStream
}

func (x *hostSetPackageFilesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostSetPackageFilesServer) Recv() (*PackageContent, error) {
	m := new(PackageContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Host_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Host/removePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).RemovePackage(ctx, req.(*PackageIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_DeployService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).DeployService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Host/deployService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).DeployService(ctx, req.(*DeployService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ListResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListResources)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ListResources(m, &hostListResourcesServer{stream})
}

type Host_ListResourcesServer interface {
	Send(*ResourceIdentifier) error
	grpc.ServerStream
}

type hostListResourcesServer struct {
	grpc.ServerStream
}

func (x *hostListResourcesServer) Send(m *ResourceIdentifier) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_Interact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostServer).Interact(&hostInteractServer{stream})
}

type Host_InteractServer interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ServerStream
}

type hostInteractServer struct {
	grpc.ServerStream
}

func (x *hostInteractServer) Send(m *Interaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostInteractServer) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Host_ServiceDesc is the grpc.ServiceDesc for Host service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Host_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khutulun.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getVersion",
			Handler:    _Host_GetVersion_Handler,
		},
		{
			MethodName: "addHost",
			Handler:    _Host_AddHost_Handler,
		},
		{
			MethodName: "removePackage",
			Handler:    _Host_RemovePackage_Handler,
		},
		{
			MethodName: "deployService",
			Handler:    _Host_DeployService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listHosts",
			Handler:       _Host_ListHosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listNamespaces",
			Handler:       _Host_ListNamespaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPackages",
			Handler:       _Host_ListPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPackageFiles",
			Handler:       _Host_ListPackageFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getPackageFiles",
			Handler:       _Host_GetPackageFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "setPackageFiles",
			Handler:       _Host_SetPackageFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "listResources",
			Handler:       _Host_ListResources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "interact",
			Handler:       _Host_Interact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "khutulun.proto",
}

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	Instantiate(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Interact(ctx context.Context, opts ...grpc.CallOption) (Plugin_InteractClient, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) Instantiate(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Plugin/instantiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Interact(ctx context.Context, opts ...grpc.CallOption) (Plugin_InteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Plugin_ServiceDesc.Streams[0], "/khutulun.Plugin/interact", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginInteractClient{stream}
	return x, nil
}

type Plugin_InteractClient interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ClientStream
}

type pluginInteractClient struct {
	grpc.ClientStream
}

func (x *pluginInteractClient) Send(m *Interaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pluginInteractClient) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	Instantiate(context.Context, *Config) (*emptypb.Empty, error)
	Interact(Plugin_InteractServer) error
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) Instantiate(context.Context, *Config) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instantiate not implemented")
}
func (UnimplementedPluginServer) Interact(Plugin_InteractServer) error {
	return status.Errorf(codes.Unimplemented, "method Interact not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_Instantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Instantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Plugin/instantiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Instantiate(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Interact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginServer).Interact(&pluginInteractServer{stream})
}

type Plugin_InteractServer interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ServerStream
}

type pluginInteractServer struct {
	grpc.ServerStream
}

func (x *pluginInteractServer) Send(m *Interaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pluginInteractServer) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khutulun.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "instantiate",
			Handler:    _Plugin_Instantiate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "interact",
			Handler:       _Plugin_Interact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "khutulun.proto",
}
