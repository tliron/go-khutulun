// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: khutulun.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConductorClient is the client API for Conductor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConductorClient interface {
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	ListNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Conductor_ListNamespacesClient, error)
	ListArtifacts(ctx context.Context, in *ListArtifacts, opts ...grpc.CallOption) (Conductor_ListArtifactsClient, error)
	GetArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (Conductor_GetArtifactClient, error)
	SetArtifact(ctx context.Context, opts ...grpc.CallOption) (Conductor_SetArtifactClient, error)
	RemoveArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Empty, error)
	DeployService(ctx context.Context, in *DeployService, opts ...grpc.CallOption) (*Empty, error)
	ListResources(ctx context.Context, in *ListResources, opts ...grpc.CallOption) (Conductor_ListResourcesClient, error)
	InteractRunnable(ctx context.Context, opts ...grpc.CallOption) (Conductor_InteractRunnableClient, error)
}

type conductorClient struct {
	cc grpc.ClientConnInterface
}

func NewConductorClient(cc grpc.ClientConnInterface) ConductorClient {
	return &conductorClient{cc}
}

func (c *conductorClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/khutulun.Conductor/getVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductorClient) ListNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Conductor_ListNamespacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[0], "/khutulun.Conductor/listNamespaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorListNamespacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Conductor_ListNamespacesClient interface {
	Recv() (*Namespace, error)
	grpc.ClientStream
}

type conductorListNamespacesClient struct {
	grpc.ClientStream
}

func (x *conductorListNamespacesClient) Recv() (*Namespace, error) {
	m := new(Namespace)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conductorClient) ListArtifacts(ctx context.Context, in *ListArtifacts, opts ...grpc.CallOption) (Conductor_ListArtifactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[1], "/khutulun.Conductor/listArtifacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorListArtifactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Conductor_ListArtifactsClient interface {
	Recv() (*ArtifactIdentifier, error)
	grpc.ClientStream
}

type conductorListArtifactsClient struct {
	grpc.ClientStream
}

func (x *conductorListArtifactsClient) Recv() (*ArtifactIdentifier, error) {
	m := new(ArtifactIdentifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conductorClient) GetArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (Conductor_GetArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[2], "/khutulun.Conductor/getArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorGetArtifactClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Conductor_GetArtifactClient interface {
	Recv() (*ArtifactContent, error)
	grpc.ClientStream
}

type conductorGetArtifactClient struct {
	grpc.ClientStream
}

func (x *conductorGetArtifactClient) Recv() (*ArtifactContent, error) {
	m := new(ArtifactContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conductorClient) SetArtifact(ctx context.Context, opts ...grpc.CallOption) (Conductor_SetArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[3], "/khutulun.Conductor/setArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorSetArtifactClient{stream}
	return x, nil
}

type Conductor_SetArtifactClient interface {
	Send(*ArtifactContent) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type conductorSetArtifactClient struct {
	grpc.ClientStream
}

func (x *conductorSetArtifactClient) Send(m *ArtifactContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conductorSetArtifactClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conductorClient) RemoveArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Conductor/removeArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductorClient) DeployService(ctx context.Context, in *DeployService, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Conductor/deployService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductorClient) ListResources(ctx context.Context, in *ListResources, opts ...grpc.CallOption) (Conductor_ListResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[4], "/khutulun.Conductor/listResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorListResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Conductor_ListResourcesClient interface {
	Recv() (*ResourceIdentifier, error)
	grpc.ClientStream
}

type conductorListResourcesClient struct {
	grpc.ClientStream
}

func (x *conductorListResourcesClient) Recv() (*ResourceIdentifier, error) {
	m := new(ResourceIdentifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conductorClient) InteractRunnable(ctx context.Context, opts ...grpc.CallOption) (Conductor_InteractRunnableClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conductor_ServiceDesc.Streams[5], "/khutulun.Conductor/interactRunnable", opts...)
	if err != nil {
		return nil, err
	}
	x := &conductorInteractRunnableClient{stream}
	return x, nil
}

type Conductor_InteractRunnableClient interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ClientStream
}

type conductorInteractRunnableClient struct {
	grpc.ClientStream
}

func (x *conductorInteractRunnableClient) Send(m *Interaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conductorInteractRunnableClient) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConductorServer is the server API for Conductor service.
// All implementations must embed UnimplementedConductorServer
// for forward compatibility
type ConductorServer interface {
	GetVersion(context.Context, *Empty) (*Version, error)
	ListNamespaces(*Empty, Conductor_ListNamespacesServer) error
	ListArtifacts(*ListArtifacts, Conductor_ListArtifactsServer) error
	GetArtifact(*ArtifactIdentifier, Conductor_GetArtifactServer) error
	SetArtifact(Conductor_SetArtifactServer) error
	RemoveArtifact(context.Context, *ArtifactIdentifier) (*Empty, error)
	DeployService(context.Context, *DeployService) (*Empty, error)
	ListResources(*ListResources, Conductor_ListResourcesServer) error
	InteractRunnable(Conductor_InteractRunnableServer) error
	mustEmbedUnimplementedConductorServer()
}

// UnimplementedConductorServer must be embedded to have forward compatible implementations.
type UnimplementedConductorServer struct {
}

func (UnimplementedConductorServer) GetVersion(context.Context, *Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedConductorServer) ListNamespaces(*Empty, Conductor_ListNamespacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedConductorServer) ListArtifacts(*ListArtifacts, Conductor_ListArtifactsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedConductorServer) GetArtifact(*ArtifactIdentifier, Conductor_GetArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedConductorServer) SetArtifact(Conductor_SetArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method SetArtifact not implemented")
}
func (UnimplementedConductorServer) RemoveArtifact(context.Context, *ArtifactIdentifier) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveArtifact not implemented")
}
func (UnimplementedConductorServer) DeployService(context.Context, *DeployService) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployService not implemented")
}
func (UnimplementedConductorServer) ListResources(*ListResources, Conductor_ListResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedConductorServer) InteractRunnable(Conductor_InteractRunnableServer) error {
	return status.Errorf(codes.Unimplemented, "method InteractRunnable not implemented")
}
func (UnimplementedConductorServer) mustEmbedUnimplementedConductorServer() {}

// UnsafeConductorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConductorServer will
// result in compilation errors.
type UnsafeConductorServer interface {
	mustEmbedUnimplementedConductorServer()
}

func RegisterConductorServer(s grpc.ServiceRegistrar, srv ConductorServer) {
	s.RegisterService(&Conductor_ServiceDesc, srv)
}

func _Conductor_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductorServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Conductor/getVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductorServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conductor_ListNamespaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConductorServer).ListNamespaces(m, &conductorListNamespacesServer{stream})
}

type Conductor_ListNamespacesServer interface {
	Send(*Namespace) error
	grpc.ServerStream
}

type conductorListNamespacesServer struct {
	grpc.ServerStream
}

func (x *conductorListNamespacesServer) Send(m *Namespace) error {
	return x.ServerStream.SendMsg(m)
}

func _Conductor_ListArtifacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListArtifacts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConductorServer).ListArtifacts(m, &conductorListArtifactsServer{stream})
}

type Conductor_ListArtifactsServer interface {
	Send(*ArtifactIdentifier) error
	grpc.ServerStream
}

type conductorListArtifactsServer struct {
	grpc.ServerStream
}

func (x *conductorListArtifactsServer) Send(m *ArtifactIdentifier) error {
	return x.ServerStream.SendMsg(m)
}

func _Conductor_GetArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArtifactIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConductorServer).GetArtifact(m, &conductorGetArtifactServer{stream})
}

type Conductor_GetArtifactServer interface {
	Send(*ArtifactContent) error
	grpc.ServerStream
}

type conductorGetArtifactServer struct {
	grpc.ServerStream
}

func (x *conductorGetArtifactServer) Send(m *ArtifactContent) error {
	return x.ServerStream.SendMsg(m)
}

func _Conductor_SetArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConductorServer).SetArtifact(&conductorSetArtifactServer{stream})
}

type Conductor_SetArtifactServer interface {
	SendAndClose(*Empty) error
	Recv() (*ArtifactContent, error)
	grpc.ServerStream
}

type conductorSetArtifactServer struct {
	grpc.ServerStream
}

func (x *conductorSetArtifactServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conductorSetArtifactServer) Recv() (*ArtifactContent, error) {
	m := new(ArtifactContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Conductor_RemoveArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductorServer).RemoveArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Conductor/removeArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductorServer).RemoveArtifact(ctx, req.(*ArtifactIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conductor_DeployService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductorServer).DeployService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Conductor/deployService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductorServer).DeployService(ctx, req.(*DeployService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conductor_ListResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListResources)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConductorServer).ListResources(m, &conductorListResourcesServer{stream})
}

type Conductor_ListResourcesServer interface {
	Send(*ResourceIdentifier) error
	grpc.ServerStream
}

type conductorListResourcesServer struct {
	grpc.ServerStream
}

func (x *conductorListResourcesServer) Send(m *ResourceIdentifier) error {
	return x.ServerStream.SendMsg(m)
}

func _Conductor_InteractRunnable_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConductorServer).InteractRunnable(&conductorInteractRunnableServer{stream})
}

type Conductor_InteractRunnableServer interface {
	Send(*Interaction) error
	Recv() (*Interaction, error)
	grpc.ServerStream
}

type conductorInteractRunnableServer struct {
	grpc.ServerStream
}

func (x *conductorInteractRunnableServer) Send(m *Interaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conductorInteractRunnableServer) Recv() (*Interaction, error) {
	m := new(Interaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Conductor_ServiceDesc is the grpc.ServiceDesc for Conductor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conductor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khutulun.Conductor",
	HandlerType: (*ConductorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getVersion",
			Handler:    _Conductor_GetVersion_Handler,
		},
		{
			MethodName: "removeArtifact",
			Handler:    _Conductor_RemoveArtifact_Handler,
		},
		{
			MethodName: "deployService",
			Handler:    _Conductor_DeployService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listNamespaces",
			Handler:       _Conductor_ListNamespaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listArtifacts",
			Handler:       _Conductor_ListArtifacts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getArtifact",
			Handler:       _Conductor_GetArtifact_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "setArtifact",
			Handler:       _Conductor_SetArtifact_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "listResources",
			Handler:       _Conductor_ListResources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "interactRunnable",
			Handler:       _Conductor_InteractRunnable_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "khutulun.proto",
}

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	Instantiate(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) Instantiate(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/khutulun.Plugin/Instantiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	Instantiate(context.Context, *Config) (*Empty, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) Instantiate(context.Context, *Config) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instantiate not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_Instantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Instantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/khutulun.Plugin/Instantiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Instantiate(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "khutulun.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Instantiate",
			Handler:    _Plugin_Instantiate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "khutulun.proto",
}
