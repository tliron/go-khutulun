tosca_definitions_version: tosca_2_0

imports:

- capabilities.yaml
- relationships.yaml
- interfaces.yaml

node_types:

  Responsive:
    description: >-
      Base type for nodes that can respond to events.
    interfaces:
      events:
        type: Events

  Instantiable:
    description: >-
      Base type for nodes that can have zero or more instances.

      See `Redundancy` policy.
    derived_from: Responsive
    attributes:
      # TODO: do we need both?
      # count:
      #   type: Count
      #   default: 0
      instances:
        type: list
        entry_schema: Instance
        #default: [ { name: "hello" } ]

  # Endpoints

  Endpoint:
    description: >-
      An endpoint is a node that contains connections. The intention is that its connectivity
      is to be used by "something else". It thus represents a logical "end" of a specific
      network graph.

      The "something else" can be incoming clients, ingress from another cluster or system, or
      nodes (activities) in another service. Indeed, endpoints can be used in service
      composition as logical relays for completing a network graph comprising multiple
      services.
    derived_from: Instantiable
    properties:
      ingress:
        type: boolean
        default: false
    requirements:
    - connection:
        capability: Connectable
        relationship: Connection

  IPEndpoint:
    derived_from: Endpoint
    requirements:
    - connection:
        relationship: IP

  DelegateEndpoint:
    description: >-
      An IP-port endpoint that registers a delegate.
    derived_from: IPEndpoint
    properties:
      name:
        description: >-
          If not specified will use the node template's name.
        type: string
        required: false

  # Activities

  Activity:
    description: >-
      Convenience base type for activities.

      Activities are instantiable nodes with one or more Activity capabilities, which
      encapsulate the actual functionality. Note that there a single node can potentially
      have Activity capabilities scheduled to different hosts.
    derived_from: Instantiable
    requirements:
    - connection:
        capability: Connectable
        relationship: Connection
    - storage:
        capability: Storage
        relationship: Storage

  CommandProcess:
    description: >-
      A node representing a single command-activated process.
    derived_from: Activity
    capabilities:
      command-process: CommandProcess

  OCIContainer:
    description: >-
      A node representing a single OCI-compliant container.
    derived_from: Activity
    capabilities:
      container: OCIContainer
    requirements:
    - connection:
        relationship: IP

  ConnectableOCIContainer:
    description: >-
      An OCI-compliant container with a single mapped port for incoming connections.

      This is a convenience node type. If you need containers with multiple
      ports or other kinds of connections then you will need to declare your
      own node types.
    derived_from: OCIContainer
    capabilities:
      port: MappedIPPort

  IPLoadBalancer:
    derived_from: ConnectableOCIContainer
    capabilities:
      container:
        properties:
          image:
            default:
              host: docker.io
              image: nginx
              tag: 1.23.0
      port:
        properties:
          internal:
            default: 80
    requirements:
    - connection:
        relationship: IP
    # TODO: attach an artifact that sets up loadbalancing

  VirtualMachine:
    description: >-
      A node representing a single virtual machine.
    derived_from: Activity
    capabilities:
      virtual-machine: VirtualMachine

  # Storage

  Storage:
    derived_from: Responsive

  LocalDirectory:
    derived_from: Storage
    capabilities:
      local-directory: LocalDirectory
