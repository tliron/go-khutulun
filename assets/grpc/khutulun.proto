syntax = "proto3";

package khutulun;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/tliron/khutulun/api";

service Conductor {
    rpc getVersion(google.protobuf.Empty) returns (Version);
    rpc listHosts(google.protobuf.Empty) returns (stream HostIdentifier);
    rpc addHost(HostIdentifier) returns (google.protobuf.Empty);

    rpc listNamespaces(google.protobuf.Empty) returns (stream Namespace);

    rpc listBundles(ListBundles) returns (stream BundleIdentifier);
    rpc listBundleFiles(BundleIdentifier) returns (stream BundleFile);
    rpc getBundleFiles(GetBundleFiles) returns (stream BundleContent);
    rpc setBundleFiles(stream BundleContent) returns (google.protobuf.Empty);
    rpc removeBundle(BundleIdentifier) returns (google.protobuf.Empty);

    rpc deployService(DeployService) returns (google.protobuf.Empty);

    rpc listResources(ListResources) returns (stream ResourceIdentifier);

    rpc interact(stream Interaction) returns (stream Interaction);
}

service Plugin {
    rpc instantiate(Config) returns (google.protobuf.Empty);
    rpc interact(stream Interaction) returns (stream Interaction);
}

message Config {
    google.protobuf.Struct config = 1;
}

message Version {
    string version = 1;
}

message Namespace {
    string name = 1;
}

message HostIdentifier {
    string name = 1;
    string address = 2;
}

message BundleType {
    string name = 1;
}

message BundleIdentifier {
    BundleType type = 1;
    string namespace = 2;
    string name = 3;
}

message ListBundles {
    BundleType type = 1;
    string namespace = 2;
}

message GetBundleFiles {
    BundleIdentifier identifier = 1;
    repeated string paths = 3;
}

message BundleFile {
    string path = 1;
    bool executable = 2;
}

message BundleContent {
    message Start {
        BundleIdentifier identifier = 1;
    }

    Start start = 1;
    BundleFile file = 2;
    bytes bytes = 3;
}

message ServiceIdentifier {
    string namespace = 1;
    string name = 2;
}

message ListServices {
    string namespace = 1;
}

message DeployService {
    BundleIdentifier template = 1;
    ServiceIdentifier service = 2;
}

message ResourceIdentifier {
    ServiceIdentifier service = 1;
    string type = 2;
    string name = 3;
}

message ListResources {
    ServiceIdentifier service = 1;
    string type = 2;
}

message Interaction {
    enum Stream {
        NONE = 0;
        STDIN = 1;
        STDOUT = 2;
        STDERR = 3;
        SIZE = 4;
    }

    message Size {
        uint32 width = 5;
        uint32 height = 6;
    }

    message Start {
        repeated string identifier = 1;
        repeated string command = 2;
        map<string, string> environment = 3;
        bool pseudoTerminal = 4;
        Size initialSize = 5;
    }

    Start start = 1;
    Stream stream = 2;
    bytes bytes = 3;
    Size size = 4;
}
